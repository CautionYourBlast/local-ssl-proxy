#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var proxy = require("http-proxy");
var yargs = require("yargs");
var chalk = require("chalk");
var package = require(path.join(__dirname, "..", "package.json"));

var commandline = yargs.
                    usage("Usage: $0 --hostname [host] --source [port] --target [port]").
                    alias({
                      c: "cert",
                      h: "help",
                      k: "key",
                      n: "hostname",
                      o: "config",
                      s: "source",
                      t: "target",
                      v: "version"
                    }).
                    default({
                      c: path.join(__dirname, "..", "resources", "localhost.cert"),
                      k: path.join(__dirname, "..", "resources", "localhost.key"),
                      n: "localhost",
                      s: 9001,
                      t: 9000
                    });

var args = commandline.argv;

if (args.h) {
  console.error(commandline.help());
  return;
}

if (args.v) {
  console.error(package.name, ("v" + package.version));
  return;
}

var config = args.o ? require(args.o) : { proxy: args };

Object.keys(config).forEach(function(name) {
  var proxy = config[name];
  var hostname = proxy.hostname || args.hostname;
  var target = proxy.target || args.target;
  var key = proxy.key || args.key;
  var cert = proxy.cert || args.cert;
  var source = proxy.source || args.source;

  proxy.createServer({
    xfwd: true,
    ws: true,
    target: {
      host: hostname,
      port: target
    },
    ssl: {
      key: fs.readFileSync(key, "utf8"),
      cert: fs.readFileSync(cert, "utf8")
    }
  }).on("error", function(e) {
    console.error(chalk.red("Request failed to " + name + ": " + chalk.bold(e.code)));
  }).listen(source);

  console.log(chalk.green("Started " + chalk.bold(name) + ": https://" + hostname + ":" + source, "â†’ http://" + hostname + ":" + target));
});
